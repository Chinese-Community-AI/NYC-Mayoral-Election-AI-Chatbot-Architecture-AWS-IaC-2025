type Message {
  id: ID!
  conversationId: ID!
  content: String!
  role: String! # "user" or "assistant"
  timestamp: AWSDateTime!
  isComplete: Boolean
}

type MessageUpdate @aws_iam {
  messageId: ID!
  conversationId: ID!
  content: String!
  isComplete: Boolean!
  timestamp: AWSDateTime!
}

type Conversation {
  id: ID!
  userId: String!
  title: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Query {
  getMessage(id: ID!): Message
  getConversation(id: ID!): Conversation
  listConversations: [Conversation]
  listRecentConversations(limit: Int): [Conversation]
  getMessages(conversationId: ID!): [Message]
}

type Mutation {
  sendMessage(conversationId: ID!, content: String!): Message
  createConversation(title: String): Conversation
  updateMessageContent(
    messageId: ID!
    conversationId: ID!
    content: String!
    isComplete: Boolean!
  ): MessageUpdate @aws_iam
}

type Subscription {
  onNewMessage(conversationId: ID!): Message
    @aws_subscribe(mutations: ["sendMessage"])

  onMessageUpdate(conversationId: ID!): MessageUpdate
    @aws_subscribe(mutations: ["updateMessageContent"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
